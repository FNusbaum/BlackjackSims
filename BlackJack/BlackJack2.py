import matplotlib.pyplot as plt
import random
import math
import time
import csv

class Game():
    def __init__(self, num_decks, num_players):
        self.numWins,self.numLosses,self.numPushes,self.num_play_deviations =0, 0, 0,0
        self.count_results = {}

        self.probDealerBust = {-25:[0, 0, 18.66, 20.28, 21.88, 23.68, 25.99, 23.51, 22.49, 21.71, 21.72, 5.29],-24:[0, 0, 19.09, 20.84, 22.68, 24.03, 26.84, 23.58, 22.78, 21.92, 21.9, 5.57],-23:[0, 0, 19.74, 21.57, 23.17, 24.43, 27.03, 23.84, 22.98, 22.18, 22.05, 6.08],-22:[0, 0, 19.88, 21.94, 23.87, 25.22, 27.96, 24.09, 23.24, 22.34, 22.16, 6.06],-21:[0, 0, 20.92, 22.75, 24.37, 26.01, 28.5, 24.22, 23.19, 22.58, 22.3, 6.23],-20:[0, 0, 21.33, 23.11, 25.05, 26.29, 29.18, 24.37, 23.45, 22.65, 22.41, 6.55],-19:[0, 0, 22.02, 24.09, 25.62, 27.22, 29.77, 24.62, 23.63, 22.81, 22.49, 6.69],-18:[0, 0, 22.18, 24.02, 26.16, 27.52, 30.45, 24.79, 23.82, 22.98, 22.56, 7.05],-17:[0, 0, 22.8, 24.85, 26.62, 28.39, 31.07, 24.9, 23.96, 23.03, 22.67, 7.14],-16:[0, 0, 23.54, 25.56, 27.4, 28.74, 31.67, 25.06, 23.86, 23.17, 22.63, 7.46],-15:[0, 0, 23.86, 25.95, 27.93, 29.63, 32.32, 25.1, 24.27, 23.22, 22.66, 7.7],-14:[0, 0, 24.49, 26.41, 28.56, 30.24, 33.09, 25.15, 24.18, 23.29, 22.66, 7.94],-13:[0, 0, 25.0, 26.99, 29.1, 30.8, 33.53, 25.3, 24.22, 23.33, 22.67, 7.97],-12:[0, 0, 25.49, 27.58, 29.62, 31.63, 33.96, 25.37, 24.29, 23.38, 22.61, 8.18],-11:[0, 0, 26.05, 28.17, 30.43, 32.24, 34.76, 25.53, 24.29, 23.33, 22.58, 8.4],-10:[0, 0, 26.53, 28.75, 31.01, 32.97, 35.28, 25.74, 24.5, 23.42, 22.51, 8.74],-9:[0, 0, 27.06, 29.37, 31.66, 33.85, 36.08, 25.59, 24.5, 23.39, 22.49, 8.79],-8:[0, 0, 27.67, 29.99, 32.35, 34.34, 36.65, 25.56, 24.49, 23.33, 22.38, 8.9],-7:[0, 0, 28.24, 30.41, 32.99, 35.0, 37.11, 25.67, 24.45, 23.37, 22.28, 9.15],-6:[0, 0, 28.67, 31.02, 33.61, 35.86, 37.77, 25.79, 24.47, 23.22, 22.15, 9.38],-5:[0, 0, 29.13, 31.97, 34.13, 36.5, 38.41, 25.79, 24.42, 23.2, 22.0, 9.69],-4:[0, 0, 30.01, 32.3, 35.02, 37.52, 39.03, 25.62, 24.34, 23.12, 21.92, 9.45],-3:[0, 0, 30.43, 33.22, 35.65, 38.09, 39.73, 25.72, 24.41, 23.09, 21.67, 9.57],-2:[0, 0, 30.86, 33.67, 36.54, 38.97, 40.41, 25.79, 24.29, 22.85, 21.54, 9.82],-1:[0, 0, 31.67, 34.34, 37.11, 39.92, 41.02, 25.78, 24.24, 22.76, 21.36, 10.46],0:[0, 0, 32.16, 34.86, 37.69, 40.59, 41.56, 25.76, 24.09, 22.62, 21.09, 10.17],1:[0, 0, 32.81, 35.3, 38.59, 41.23, 42.24, 25.71, 24.06, 22.46, 20.88, 10.29],2:[0, 0, 33.3, 36.29, 39.43, 42.4, 42.84, 25.64, 23.98, 22.32, 20.64, 10.49],3:[0, 0, 33.61, 37.18, 40.04, 43.27, 43.51, 25.63, 23.86, 22.15, 20.38, 10.77],4:[0, 0, 34.4, 37.67, 41.06, 44.12, 44.13, 25.58, 23.66, 21.87, 20.09, 11.0],5:[0, 0, 35.27, 38.33, 41.52, 44.98, 44.73, 25.47, 23.57, 21.78, 19.81, 10.82],6:[0, 0, 35.77, 39.01, 42.7, 45.81, 45.53, 25.35, 23.49, 21.48, 19.54, 11.2],7:[0, 0, 35.86, 39.72, 43.29, 46.79, 46.13, 25.35, 23.34, 21.26, 19.15, 11.24],8:[0, 0, 36.74, 40.14, 44.05, 47.88, 46.79, 25.24, 23.13, 21.09, 18.83, 11.16],9:[0, 0, 37.27, 41.15, 45.16, 48.71, 47.47, 25.17, 22.93, 20.7, 18.49, 11.01],10:[0, 0, 38.15, 41.97, 45.96, 49.94, 48.13, 25.11, 22.77, 20.51, 18.08, 11.12],11:[0, 0, 38.63, 42.71, 46.63, 50.77, 48.85, 25.07, 22.5, 20.16, 17.73, 10.89],12:[0, 0, 39.13, 43.51, 47.66, 51.83, 49.58, 24.92, 22.4, 19.92, 17.31, 11.51],13:[0, 0, 39.51, 44.08, 48.58, 52.85, 50.26, 24.77, 22.12, 19.63, 16.93, 11.67],14:[0, 0, 40.41, 44.67, 50.02, 53.96, 50.97, 24.74, 21.91, 19.27, 16.47, 11.21],15:[0, 0, 40.8, 45.75, 50.46, 55.11, 51.68, 24.56, 21.72, 18.93, 16.01, 11.76],16:[0, 0, 41.46, 46.65, 51.56, 56.16, 52.42, 24.49, 21.53, 18.56, 15.59, 11.45],17:[0, 0, 42.24, 47.19, 52.29, 57.17, 53.13, 24.39, 21.29, 18.16, 15.1, 11.71],18:[0, 0, 42.74, 48.19, 53.48, 58.52, 53.94, 24.18, 21.04, 17.81, 14.62, 11.13],19:[0, 0, 43.37, 48.89, 54.72, 59.61, 54.64, 24.09, 20.81, 17.43, 14.13, 11.18],20:[0, 0, 43.95, 49.61, 55.44, 60.99, 55.41, 23.98, 20.47, 17.04, 13.57, 11.2],21:[0, 0, 44.16, 50.61, 56.71, 61.96, 56.12, 23.86, 20.25, 16.66, 13.03, 10.71],22:[0, 0, 45.68, 50.93, 58.31, 63.21, 56.84, 23.66, 19.98, 16.16, 12.46, 11.09],23:[0, 0, 45.87, 52.41, 59.43, 64.63, 57.79, 23.47, 19.69, 15.77, 11.93, 11.09],24:[0, 0, 46.5, 52.93, 60.47, 65.97, 58.5, 23.39, 19.4, 15.29, 11.34, 11.07],25:[0, 0, 46.3, 53.95, 61.07, 67.15, 59.32, 23.27, 19.08, 14.87, 10.69, 11.02],}
        #self.probDealerOutcomes = self.probDealerOutcomes_initializer()
        self.prob_one_hit_outcomes = self.P_1_hit_results()
        self.probDealerOutcomes = {}
        
        self.running_count = 0
        self.true_count = 0
        self.bet_minimum = 10
        self.bet_maximum = 500
        self.bankroll = 10000


        self.ruin_count, self.big_return_count = 0,0 

        self.num_decks, self.num_players = num_decks, num_players

        self.cards_in_shoe = self.shoe_initializer(self.num_decks)
        self.cards_played = []

        self.bets = []
        self.profit = [0 for num in range(self.num_players)]

        self.cut_card = self.choose_cut_card()

        self.strategy = {"Soft": {}, "Hard": {}, "Split": {}, "Surr": {}}

        self.player_cards = []
        self.dealer_cards = []
    def read(self,file_path):
        with open(file_path, 'r') as file:
            reader = csv.reader(file, dialect = 'excel')
            table = list(reader)
            file.close()
        return table
    def write(self,file_path,table):
        with open(file_path, 'w') as file:
            writer = csv.writer(file, dialect = 'excel')
            writer.writerows(table)
            file.close()

    def probDealerOutcomes_initializer(self):
        dictionary = {-25: [[0], [0], [18.35, 18.0, 15.36, 13.39, 11.42, 23.47], [17.95, 17.81, 15.79, 13.17, 11.23, 24.07], [17.5, 17.46, 15.63, 13.61, 11.06, 24.75], [16.8, 17.11, 15.46, 13.62, 11.63, 25.37], [17.13, 16.26, 14.81, 13.18, 11.37, 27.24], [24.05, 16.5, 13.31, 11.86, 10.23, 24.04], [18.66, 23.57, 14.21, 11.04, 9.57, 22.95], [17.36, 18.22, 21.44, 12.1, 8.92, 21.96], [15.19, 16.92, 16.32, 19.55, 10.2, 21.82], [20.72, 18.12, 17.76, 16.86, 19.85, 6.7]], -24: [[0], [0], [18.17, 17.86, 15.25, 13.39, 11.45, 23.88], [17.8, 17.62, 15.71, 13.14, 11.22, 24.52], [17.32, 17.26, 15.5, 13.58, 11.06, 25.28], [16.58, 16.93, 15.31, 13.59, 11.67, 25.92], [17.0, 16.03, 14.66, 13.08, 11.35, 27.88], [24.5, 16.32, 13.07, 11.69, 10.13, 24.28], [18.37, 23.99, 14.1, 10.86, 9.49, 23.17], [17.09, 17.91, 21.94, 12.05, 8.82, 22.17], [15.01, 16.63, 16.07, 20.1, 10.21, 21.99], [20.39, 17.91, 17.57, 16.69, 20.49, 6.95]], -23: [[0], [0], [18.0, 17.71, 15.16, 13.3, 11.46, 24.37], [17.59, 17.41, 15.61, 13.08, 11.25, 25.06], [17.15, 17.06, 15.38, 13.54, 11.05, 25.81], [16.39, 16.72, 15.19, 13.52, 11.68, 26.49], [16.89, 15.79, 14.49, 12.99, 11.34, 28.5], [24.96, 16.13, 12.83, 11.53, 10.03, 24.51], [18.1, 24.43, 14.0, 10.69, 9.39, 23.39], [16.84, 17.61, 22.44, 12.01, 8.71, 22.37], [14.82, 16.35, 15.82, 20.65, 10.22, 22.14], [20.04, 17.68, 17.38, 16.53, 21.13, 7.25]], -22: [[0], [0], [17.84, 17.53, 15.08, 13.3, 11.51, 24.74], [17.45, 17.25, 15.47, 13.05, 11.25, 25.53], [16.98, 16.86, 15.26, 13.51, 11.05, 26.33], [16.18, 16.54, 15.05, 13.47, 11.72, 27.05], [16.79, 15.56, 14.34, 12.89, 11.3, 29.12], [25.43, 15.96, 12.59, 11.37, 9.93, 24.71], [17.83, 24.87, 13.9, 10.52, 9.3, 23.58], [16.58, 17.31, 22.95, 11.98, 8.6, 22.56], [14.64, 16.08, 15.57, 21.2, 10.24, 22.28], [19.73, 17.47, 17.14, 16.36, 21.77, 7.53]], -21: [[0], [0], [17.7, 17.41, 14.92, 13.24, 11.51, 25.22], [17.24, 17.08, 15.4, 13.0, 11.26, 26.01], [16.8, 16.67, 15.14, 13.44, 11.06, 26.89], [15.96, 16.34, 14.93, 13.42, 11.72, 27.63], [16.68, 15.32, 14.19, 12.79, 11.28, 29.74], [25.9, 15.8, 12.35, 11.21, 9.83, 24.91], [17.55, 25.32, 13.8, 10.35, 9.21, 23.76], [16.33, 17.02, 23.46, 11.95, 8.5, 22.73], [14.46, 15.8, 15.33, 21.76, 10.25, 22.39], [19.4, 17.25, 16.94, 16.19, 22.43, 7.78]], -20: [[0], [0], [17.54, 17.26, 14.85, 13.18, 11.55, 25.62], [17.07, 16.91, 15.29, 12.92, 11.28, 26.52], [16.63, 16.48, 15.02, 13.42, 11.05, 27.4], [15.77, 16.16, 14.81, 13.34, 11.73, 28.2], [16.59, 15.09, 14.03, 12.7, 11.24, 30.34], [26.36, 15.65, 12.12, 11.05, 9.72, 25.1], [17.29, 25.77, 13.72, 10.18, 9.11, 23.93], [16.08, 16.74, 23.97, 11.92, 8.39, 22.89], [14.28, 15.54, 15.09, 22.32, 10.27, 22.5], [19.08, 17.05, 16.74, 16.01, 23.08, 8.04]], -19: [[0], [0], [17.39, 17.08, 14.73, 13.11, 11.58, 26.11], [16.91, 16.71, 15.2, 12.89, 11.29, 27.0], [16.47, 16.29, 14.9, 13.36, 11.07, 27.91], [15.56, 15.96, 14.67, 13.27, 11.75, 28.79], [16.51, 14.86, 13.87, 12.59, 11.21, 30.96], [26.86, 15.5, 11.88, 10.89, 9.61, 25.27], [17.03, 26.23, 13.62, 10.02, 9.02, 24.08], [15.84, 16.46, 24.49, 11.89, 8.28, 23.03], [14.1, 15.27, 14.86, 22.89, 10.29, 22.59], [18.73, 16.83, 16.55, 15.86, 23.73, 8.3]], -18: [[0], [0], [17.21, 16.96, 14.64, 13.09, 11.59, 26.51], [16.74, 16.57, 15.08, 12.84, 11.3, 27.47], [16.29, 16.1, 14.76, 13.31, 11.06, 28.48], [15.35, 15.76, 14.54, 13.2, 11.75, 29.4], [16.44, 14.64, 13.72, 12.49, 11.16, 31.55], [27.34, 15.36, 11.66, 10.73, 9.51, 25.41], [16.77, 26.69, 13.55, 9.85, 8.92, 24.22], [15.6, 16.18, 25.01, 11.87, 8.18, 23.15], [13.92, 15.01, 14.63, 23.46, 10.32, 22.66], [18.42, 16.62, 16.34, 15.69, 24.38, 8.55]], -17: [[0], [0], [17.04, 16.75, 14.54, 13.05, 11.61, 27.01], [16.56, 16.38, 14.97, 12.79, 11.3, 28.0], [16.11, 15.91, 14.64, 13.25, 11.07, 29.01], [15.15, 15.59, 14.4, 13.14, 11.73, 29.98], [16.37, 14.42, 13.55, 12.38, 11.12, 32.15], [27.83, 15.22, 11.43, 10.57, 9.4, 25.55], [16.52, 27.16, 13.48, 9.68, 8.82, 24.34], [15.37, 15.91, 25.53, 11.85, 8.07, 23.26], [13.75, 14.76, 14.4, 24.03, 10.34, 22.71], [18.08, 16.4, 16.13, 15.53, 25.04, 8.82]], -16: [[0], [0], [16.88, 16.58, 14.42, 13.01, 11.63, 27.48], [16.39, 16.19, 14.86, 12.73, 11.31, 28.51], [15.95, 15.73, 14.5, 13.19, 11.08, 29.54], [14.94, 15.41, 14.26, 13.05, 11.73, 30.61], [16.31, 14.19, 13.39, 12.28, 11.08, 32.75], [28.32, 15.09, 11.21, 10.41, 9.3, 25.68], [16.27, 27.63, 13.41, 9.52, 8.72, 24.45], [15.14, 15.64, 26.07, 11.83, 7.96, 23.35], [13.58, 14.51, 14.18, 24.6, 10.37, 22.75], [17.75, 16.19, 15.94, 15.37, 25.69, 9.07]], -15: [[0], [0], [16.69, 16.43, 14.35, 12.97, 11.63, 27.94], [16.22, 16.03, 14.75, 12.69, 11.33, 28.98], [15.78, 15.55, 14.4, 13.13, 11.07, 30.07], [14.75, 15.22, 14.13, 12.97, 11.71, 31.22], [16.27, 13.96, 13.23, 12.16, 11.03, 33.35], [28.82, 14.96, 10.99, 10.26, 9.19, 25.78], [16.01, 28.11, 13.33, 9.36, 8.63, 24.55], [14.91, 15.38, 26.6, 11.82, 7.85, 23.43], [13.41, 14.27, 13.96, 25.18, 10.4, 22.77], [17.43, 15.99, 15.73, 15.2, 26.33, 9.32]], -14: [[0], [0], [16.53, 16.24, 14.25, 12.95, 11.65, 28.38], [16.05, 15.85, 14.63, 12.64, 11.33, 29.5], [15.61, 15.35, 14.26, 13.06, 11.08, 30.64], [14.55, 15.03, 13.98, 12.91, 11.69, 31.84], [16.24, 13.73, 13.07, 12.05, 10.96, 33.94], [29.32, 14.84, 10.77, 10.1, 9.08, 25.89], [15.78, 28.6, 13.28, 9.19, 8.52, 24.63], [14.69, 15.12, 27.14, 11.81, 7.73, 23.5], [13.25, 14.03, 13.75, 25.76, 10.44, 22.78], [17.1, 15.77, 15.55, 15.04, 26.99, 9.56]], -13: [[0], [0], [16.38, 16.07, 14.15, 12.88, 11.67, 28.85], [15.86, 15.67, 14.51, 12.61, 11.34, 30.02], [15.43, 15.18, 14.12, 12.98, 11.08, 31.21], [14.35, 14.84, 13.85, 12.81, 11.67, 32.48], [16.21, 13.51, 12.91, 11.93, 10.9, 34.54], [29.82, 14.73, 10.55, 9.94, 8.97, 25.99], [15.54, 29.09, 13.21, 9.03, 8.42, 24.7], [14.47, 14.87, 27.69, 11.8, 7.62, 23.54], [13.08, 13.79, 13.54, 26.34, 10.47, 22.77], [16.77, 15.57, 15.34, 14.88, 27.64, 9.8]], -12: [[0], [0], [16.21, 15.89, 14.06, 12.85, 11.69, 29.31], [15.69, 15.47, 14.38, 12.55, 11.35, 30.57], [15.26, 14.98, 13.99, 12.9, 11.09, 31.77], [14.15, 14.66, 13.71, 12.72, 11.63, 33.12], [16.18, 13.29, 12.74, 11.82, 10.84, 35.13], [30.34, 14.62, 10.33, 9.78, 8.86, 26.07], [15.32, 29.59, 13.17, 8.86, 8.31, 24.75], [14.25, 14.62, 28.23, 11.8, 7.51, 23.58], [12.92, 13.56, 13.33, 26.93, 10.51, 22.75], [16.45, 15.36, 15.14, 14.72, 28.29, 10.04]], -11: [[0], [0], [16.04, 15.72, 13.95, 12.81, 11.68, 29.8], [15.52, 15.29, 14.25, 12.51, 11.35, 31.07], [15.1, 14.79, 13.85, 12.82, 11.09, 32.35], [13.95, 14.48, 13.56, 12.63, 11.61, 33.77], [16.17, 13.07, 12.57, 11.7, 10.77, 35.72], [30.86, 14.53, 10.12, 9.62, 8.74, 26.13], [15.08, 30.09, 13.11, 8.7, 8.21, 24.8], [14.04, 14.38, 28.78, 11.8, 7.39, 23.6], [12.76, 13.33, 13.13, 27.52, 10.55, 22.71], [16.12, 15.17, 14.95, 14.57, 28.94, 10.24]], -10: [[0], [0], [15.85, 15.53, 13.88, 12.75, 11.72, 30.26], [15.36, 15.09, 14.11, 12.47, 11.36, 31.61], [14.92, 14.59, 13.7, 12.73, 11.08, 32.97], [13.76, 14.29, 13.42, 12.53, 11.57, 34.43], [16.16, 12.85, 12.41, 11.57, 10.7, 36.31], [31.38, 14.43, 9.91, 9.47, 8.63, 26.19], [14.87, 30.59, 13.07, 8.54, 8.1, 24.83], [13.84, 14.14, 29.33, 11.8, 7.28, 23.6], [12.6, 13.11, 12.93, 28.12, 10.59, 22.65], [15.8, 14.97, 14.75, 14.4, 29.59, 10.49]], -9: [[0], [0], [15.68, 15.36, 13.77, 12.71, 11.73, 30.75], [15.17, 14.91, 13.98, 12.42, 11.36, 32.16], [14.74, 14.4, 13.57, 12.65, 11.09, 33.55], [13.57, 14.1, 13.28, 12.43, 11.51, 35.11], [16.17, 12.63, 12.24, 11.45, 10.62, 36.9], [31.91, 14.34, 9.7, 9.31, 8.52, 26.24], [14.65, 31.11, 13.03, 8.38, 7.99, 24.84], [13.63, 13.9, 29.89, 11.81, 7.16, 23.6], [12.44, 12.89, 12.73, 28.71, 10.64, 22.58], [15.47, 14.77, 14.57, 14.24, 30.25, 10.7]], -8: [[0], [0], [15.51, 15.16, 13.69, 12.68, 11.74, 31.22], [14.99, 14.72, 13.83, 12.38, 11.38, 32.7], [14.57, 14.21, 13.42, 12.55, 11.09, 34.16], [13.37, 13.9, 13.12, 12.34, 11.47, 35.8], [16.17, 12.41, 12.07, 11.32, 10.53, 37.5], [32.44, 14.26, 9.49, 9.15, 8.4, 26.27], [14.43, 31.62, 13.0, 8.22, 7.88, 24.85], [13.44, 13.67, 30.45, 11.82, 7.05, 23.56], [12.29, 12.68, 12.54, 29.31, 10.68, 22.49], [15.15, 14.58, 14.39, 14.08, 30.9, 10.9]], -7: [[0], [0], [15.32, 14.97, 13.59, 12.66, 11.74, 31.71], [14.8, 14.52, 13.7, 12.33, 11.39, 33.26], [14.39, 14.0, 13.27, 12.46, 11.09, 34.79], [13.19, 13.71, 12.98, 12.23, 11.41, 36.49], [16.19, 12.19, 11.9, 11.19, 10.44, 38.09], [32.99, 14.18, 9.28, 8.99, 8.28, 26.29], [14.21, 32.15, 12.96, 8.06, 7.77, 24.84], [13.24, 13.45, 31.02, 11.83, 6.93, 23.52], [12.14, 12.47, 12.35, 29.92, 10.73, 22.38], [14.84, 14.38, 14.21, 13.93, 31.56, 11.09]], -6: [[0], [0], [15.15, 14.78, 13.52, 12.61, 11.76, 32.18], [14.61, 14.32, 13.55, 12.29, 11.4, 33.82], [14.21, 13.82, 13.11, 12.35, 11.1, 35.41], [13.0, 13.52, 12.82, 12.11, 11.35, 37.2], [16.22, 11.96, 11.73, 11.05, 10.35, 38.69], [33.53, 14.11, 9.07, 8.83, 8.16, 26.31], [14.01, 32.67, 12.94, 7.9, 7.66, 24.82], [13.05, 13.23, 31.58, 11.85, 6.81, 23.47], [11.99, 12.27, 12.17, 30.52, 10.79, 22.26], [14.52, 14.18, 14.01, 13.8, 32.2, 11.29]], -5: [[0], [0], [14.95, 14.58, 13.42, 12.58, 11.76, 32.71], [14.44, 14.12, 13.4, 12.25, 11.41, 34.39], [14.04, 13.61, 12.95, 12.25, 11.1, 36.04], [12.8, 13.32, 12.66, 12.0, 11.29, 37.93], [16.26, 11.75, 11.55, 10.9, 10.26, 39.28], [34.07, 14.04, 8.87, 8.67, 8.04, 26.32], [13.8, 33.21, 12.91, 7.74, 7.54, 24.79], [12.87, 13.01, 32.16, 11.86, 6.69, 23.4], [11.84, 12.07, 11.99, 31.13, 10.84, 22.12], [14.19, 13.99, 13.84, 13.62, 32.87, 11.49]], -4: [[0], [0], [14.76, 14.38, 13.33, 12.55, 11.78, 33.2], [14.25, 13.92, 13.23, 12.21, 11.42, 34.97], [13.85, 13.42, 12.8, 12.14, 11.1, 36.68], [12.61, 13.13, 12.5, 11.89, 11.22, 38.65], [16.3, 11.51, 11.36, 10.77, 10.16, 39.88], [34.62, 13.98, 8.67, 8.51, 7.91, 26.32], [13.61, 33.74, 12.9, 7.58, 7.42, 24.75], [12.68, 12.8, 32.74, 11.88, 6.57, 23.32], [11.7, 11.88, 11.81, 31.74, 10.9, 21.98], [13.88, 13.81, 13.66, 13.48, 33.52, 11.66]], -3: [[0], [0], [14.56, 14.18, 13.26, 12.51, 11.78, 33.71], [14.05, 13.71, 13.09, 12.17, 11.43, 35.55], [13.66, 13.22, 12.64, 12.01, 11.11, 37.36], [12.42, 12.92, 12.34, 11.76, 11.14, 39.41], [16.35, 11.3, 11.18, 10.62, 10.05, 40.49], [35.18, 13.92, 8.47, 8.35, 7.78, 26.31], [13.41, 34.29, 12.87, 7.42, 7.3, 24.7], [12.51, 12.59, 33.32, 11.91, 6.45, 23.21], [11.56, 11.69, 11.64, 32.36, 10.95, 21.8], [13.55, 13.61, 13.48, 13.34, 34.18, 11.83]], -2: [[0], [0], [14.38, 13.97, 13.16, 12.48, 11.79, 34.22], [13.86, 13.5, 12.92, 12.13, 11.44, 36.14], [13.48, 13.0, 12.48, 11.9, 11.11, 38.03], [12.23, 12.72, 12.17, 11.63, 11.06, 40.19], [16.41, 11.07, 11.0, 10.48, 9.95, 41.08], [35.75, 13.87, 8.26, 8.19, 7.67, 26.28], [13.23, 34.83, 12.87, 7.26, 7.18, 24.63], [12.33, 12.39, 33.9, 11.94, 6.33, 23.1], [11.42, 11.5, 11.47, 32.97, 11.01, 21.62], [13.23, 13.43, 13.31, 13.2, 34.83, 12.01]], 
                                      -1: [[0], [0], [14.17, 13.76, 13.08, 12.46, 11.8, 34.74], [13.67, 13.3, 12.76, 12.08, 11.46, 36.74], [13.28, 12.8, 12.31, 11.78, 11.12, 38.71], [12.05, 12.53, 12.0, 11.51, 10.96, 40.96], [16.48, 10.85, 10.82, 10.33, 9.84, 41.68], [36.31, 13.83, 8.06, 8.03, 7.54, 26.25], [13.04, 35.38, 12.86, 7.1, 7.06, 24.55], [12.16, 12.19, 34.49, 11.96, 6.2, 22.98], [11.28, 11.32, 11.3, 33.59, 11.08, 21.42], [12.91, 13.24, 13.13, 13.06, 35.48, 12.19]], 0: [[0], [0], [13.97, 13.53, 13.0, 12.43, 11.81, 35.26], [13.46, 13.08, 12.58, 12.05, 11.47, 37.36], [13.08, 12.59, 12.13, 11.64, 11.12, 39.43], [11.86, 12.32, 11.83, 11.37, 10.88, 41.76], [16.56, 10.63, 10.63, 10.17, 9.72, 42.29], [36.87, 13.79, 7.86, 7.86, 7.4, 26.21], [12.86, 35.94, 12.86, 6.94, 6.94, 24.46], [12.0, 12.0, 35.08, 12.0, 6.08, 22.83], [11.14, 11.14, 11.14, 34.22, 11.14, 21.21], [12.59, 13.06, 12.97, 12.92, 36.14, 12.32]], 1: [[0], [0], [13.76, 13.31, 12.92, 12.4, 11.82, 35.79], [13.25, 12.87, 12.4, 12.01, 11.49, 37.97], [12.89, 12.38, 11.96, 11.51, 11.12, 40.15], [11.67, 12.11, 11.64, 11.22, 10.77, 42.58], [16.63, 10.41, 10.44, 10.02, 9.6, 42.9], [37.45, 13.75, 7.66, 7.69, 7.27, 26.17], [12.68, 36.5, 12.85, 6.78, 6.81, 24.37], [11.84, 11.81, 35.68, 12.03, 5.96, 22.67], [11.01, 10.97, 10.98, 34.85, 11.21, 20.98], [12.28, 12.89, 12.81, 12.78, 36.81, 12.43]], 2: [[0], [0], [13.54, 13.09, 12.83, 12.37, 11.83, 36.34], [13.06, 12.65, 12.22, 11.96, 11.51, 38.6], [12.69, 12.17, 11.78, 11.37, 11.12, 40.87], [11.49, 11.9, 11.47, 11.08, 10.67, 43.4], [16.73, 10.18, 10.24, 9.86, 9.47, 43.53], [38.03, 13.72, 7.47, 7.54, 7.15, 26.11], [12.51, 37.07, 12.87, 6.62, 6.68, 24.25], [11.68, 11.62, 36.28, 12.07, 5.83, 22.51], [10.88, 10.8, 10.83, 35.48, 11.28, 20.73], [11.96, 12.71, 12.65, 12.64, 37.47, 12.58]], 3: [[0], [0], [13.34, 12.86, 12.74, 12.36, 11.84, 36.85], [12.84, 12.42, 12.04, 11.93, 11.54, 39.24], [12.49, 11.94, 11.6, 11.22, 11.12, 41.62], [11.3, 11.68, 11.28, 10.93, 10.56, 44.24], [16.82, 9.95, 10.05, 9.69, 9.34, 44.15], [38.61, 13.69, 7.27, 7.36, 7.01, 26.05], [12.33, 37.65, 12.88, 6.46, 6.55, 24.13], [11.53, 11.44, 36.88, 12.11, 5.7, 22.33], [10.75, 10.64, 10.68, 36.11, 11.35, 20.47], [11.65, 12.52, 12.47, 12.5, 38.13, 12.73]], 4: [[0], [0], [13.11, 12.62, 12.67, 12.33, 11.86, 37.41], [12.63, 12.19, 11.85, 11.89, 11.56, 39.89], [12.27, 11.73, 11.41, 11.08, 11.12, 42.38], [11.12, 11.46, 11.09, 10.78, 10.44, 45.11], [16.92, 9.73, 9.85, 9.53, 9.21, 44.77], [39.19, 13.67, 7.07, 7.2, 6.87, 25.99], [12.17, 38.22, 12.89, 6.3, 6.42, 24.0], [11.38, 11.27, 37.49, 12.16, 5.57, 22.12], [10.62, 10.48, 10.53, 36.75, 11.42, 20.19], [11.34, 12.35, 12.32, 12.37, 38.81, 12.8]], 5: [[0], [0], [12.89, 12.4, 12.6, 12.31, 11.87, 37.93], [12.42, 11.97, 11.65, 11.86, 11.57, 40.53], [12.06, 11.5, 11.23, 10.92, 11.12, 43.16], [10.93, 11.24, 10.9, 10.62, 10.32, 45.99], [17.03, 9.5, 9.65, 9.35, 9.07, 45.41], [39.79, 13.65, 6.88, 7.03, 6.73, 25.91], [12.01, 38.79, 12.9, 6.14, 6.29, 23.86], [11.23, 11.1, 38.1, 12.2, 5.44, 21.92], [10.5, 10.33, 10.39, 37.38, 11.5, 19.9], [11.02, 12.18, 12.16, 12.24, 39.46, 12.93]], 6: [[0], [0], [12.66, 12.17, 12.51, 12.31, 11.89, 38.47], [12.18, 11.72, 11.46, 11.81, 11.6, 41.22], [11.85, 11.28, 11.03, 10.76, 11.13, 43.95], [10.75, 11.02, 10.7, 10.46, 10.19, 46.89], [17.16, 9.27, 9.44, 9.18, 8.92, 46.04], [40.38, 13.64, 6.69, 6.86, 6.6, 25.82], [11.85, 39.38, 12.92, 5.97, 6.15, 23.72], [11.09, 10.93, 38.71, 12.25, 5.31, 21.7], [10.38, 10.18, 10.25, 38.03, 11.57, 19.59], [10.71, 12.01, 12.02, 12.11, 40.11, 13.05]], 7: [[0], [0], [12.43, 11.92, 12.43, 12.28, 11.9, 39.04], [11.96, 11.49, 11.25, 11.78, 11.63, 41.88], [11.63, 11.05, 10.83, 10.6, 11.13, 44.77], [10.56, 10.79, 10.5, 10.29, 10.06, 47.81], [17.28, 9.04, 9.24, 9.0, 8.78, 46.67], [40.98, 13.63, 6.5, 6.69, 6.46, 25.74], [11.7, 39.97, 12.94, 5.81, 6.01, 23.56], [10.96, 10.77, 39.33, 12.3, 5.18, 21.45], [10.26, 10.03, 10.12, 38.67, 11.66, 19.26], [10.4, 11.84, 11.87, 11.99, 40.8, 13.1]], 8: [[0], [0], [12.2, 11.67, 12.37, 12.28, 11.92, 39.57], [11.73, 11.25, 11.05, 11.74, 11.66, 42.58], [11.41, 10.82, 10.63, 10.44, 11.13, 45.59], [10.38, 10.56, 10.3, 10.12, 9.92, 48.73], [17.41, 8.81, 9.03, 8.82, 8.62, 47.32], [41.58, 13.63, 6.3, 6.52, 6.31, 25.65], [11.56, 40.56, 12.97, 5.65, 5.87, 23.38], [10.82, 10.61, 39.95, 12.36, 5.04, 21.21], [10.14, 9.89, 9.98, 39.32, 11.74, 18.92], [10.08, 11.67, 11.71, 11.87, 41.46, 13.21]], 9: [[0], [0], [11.95, 11.42, 12.29, 12.27, 11.94, 40.13], [11.49, 11.0, 10.83, 11.7, 11.68, 43.28], [11.18, 10.57, 10.42, 10.26, 11.14, 46.43], [10.2, 10.33, 10.09, 9.93, 9.77, 49.68], [17.55, 8.58, 8.81, 8.63, 8.47, 47.98], [42.19, 13.63, 6.11, 6.35, 6.17, 25.54], [11.41, 41.16, 13.0, 5.49, 5.73, 23.2], [10.7, 10.45, 40.57, 12.42, 4.91, 20.94], [10.02, 9.75, 9.86, 39.97, 11.82, 18.57], [9.76, 11.51, 11.58, 11.74, 42.12, 13.28]], 10: [[0], [0], [11.71, 11.17, 12.22, 12.26, 11.96, 40.68], [11.25, 10.76, 10.62, 11.68, 11.72, 43.98], [10.94, 10.33, 10.21, 10.08, 11.13, 47.29], [10.02, 10.09, 9.87, 9.76, 9.63, 50.65], [17.7, 8.34, 8.59, 8.44, 8.3, 48.64], [42.8, 13.64, 5.92, 6.18, 6.02, 25.44], [11.27, 41.76, 13.03, 5.33, 5.58, 23.02], [10.57, 10.3, 41.21, 12.48, 4.77, 20.66], [9.91, 9.62, 9.73, 40.62, 11.91, 18.2], [9.45, 11.36, 11.44, 11.63, 42.8, 13.32]], 11: [[0], [0], [11.44, 10.91, 12.14, 12.27, 11.98, 41.27], [11.01, 10.51, 10.39, 11.64, 11.76, 44.69], [10.7, 10.08, 9.99, 9.89, 11.13, 48.2], [9.83, 9.84, 9.65, 9.57, 9.47, 51.66], [17.85, 8.1, 8.37, 8.25, 8.14, 49.3], [43.42, 13.65, 5.73, 6.0, 5.87, 25.33], [11.14, 42.37, 13.08, 5.16, 5.43, 22.82], [10.45, 10.16, 41.84, 12.54, 4.64, 20.36], [9.8, 9.49, 9.61, 41.29, 11.99, 17.81], [9.15, 11.2, 11.31, 11.51, 43.47, 13.36]], 12: [[0], [0], [11.19, 10.65, 12.08, 12.27, 12.01, 41.8], [10.76, 10.25, 10.17, 11.6, 11.79, 45.44], [10.46, 9.83, 9.77, 9.71, 11.14, 49.09], [9.64, 9.59, 9.42, 9.36, 9.3, 52.68], [18.02, 7.85, 8.14, 8.04, 7.96, 49.97], [44.04, 13.66, 5.54, 5.82, 5.72, 25.21], [11.01, 42.97, 13.11, 5.0, 5.29, 22.61], [10.34, 10.02, 42.46, 12.61, 4.5, 20.06], [9.69, 9.37, 9.5, 41.94, 12.08, 17.41], [8.83, 11.04, 11.17, 11.4, 44.13, 13.43]], 13: [[0], [0], [10.92, 10.38, 12.0, 12.27, 12.02, 42.4], [10.49, 9.98, 9.94, 11.57, 11.83, 46.19], [10.22, 9.58, 9.55, 9.52, 11.14, 50.0], [9.46, 9.34, 9.19, 9.16, 9.13, 53.71], [18.18, 7.62, 7.92, 7.84, 7.79, 50.67], [44.67, 13.68, 5.35, 5.64, 5.57, 25.09], [10.88, 43.59, 13.15, 4.84, 5.13, 22.4], [10.23, 9.88, 43.11, 12.67, 4.36, 19.74], [9.59, 9.25, 9.38, 42.6, 12.18, 16.99], [8.53, 10.89, 11.06, 11.3, 44.84, 13.38]], 14: [[0], [0], [10.65, 10.1, 11.92, 12.28, 12.07, 42.98], [10.24, 9.72, 9.71, 11.53, 11.88, 46.93], [9.97, 9.31, 9.31, 9.31, 11.15, 50.94], [9.28, 9.08, 8.95, 8.96, 8.95, 54.77], [18.36, 7.37, 7.67, 7.63, 7.6, 51.36], [45.29, 13.69, 5.16, 5.46, 5.42, 24.97], [10.76, 44.21, 13.2, 4.67, 4.98, 22.17], [10.12, 9.75, 43.75, 12.74, 4.22, 19.41], [9.49, 9.14, 9.27, 43.27, 12.27, 16.56], [8.21, 10.74, 10.93, 11.19, 45.5, 13.42]], 15: [[0], [0], [10.38, 9.83, 11.87, 12.3, 12.09, 43.52], [9.96, 9.44, 9.46, 11.51, 11.93, 47.69], [9.71, 9.05, 9.08, 9.11, 11.15, 51.91], [9.1, 8.82, 8.71, 8.74, 8.78, 55.85], [18.54, 7.12, 7.44, 7.42, 7.42, 52.05], [45.93, 13.72, 4.97, 5.28, 5.26, 24.84], [10.64, 44.83, 13.25, 4.51, 4.82, 21.94], [10.02, 9.62, 44.4, 12.82, 4.07, 19.06], [9.38, 9.03, 9.17, 43.94, 12.37, 16.11], [7.89, 10.61, 10.81, 11.09, 46.17, 13.44]], 16: [[0], [0], [10.09, 9.55, 11.79, 12.31, 12.13, 44.13], [9.68, 9.17, 9.22, 11.47, 11.97, 48.48], [9.45, 8.78, 8.84, 8.9, 11.15, 52.89], [8.92, 8.55, 8.47, 8.53, 8.59, 56.94], [18.73, 6.88, 7.2, 7.2, 7.23, 52.75], [46.56, 13.74, 4.78, 5.1, 5.1, 24.71], [10.53, 45.46, 13.3, 4.34, 4.66, 21.7], [9.92, 9.49, 45.05, 12.89, 3.93, 18.71], [9.29, 8.92, 9.07, 44.61, 12.46, 15.65], [7.58, 10.45, 10.69, 10.99, 46.84, 13.44]], 17: [[0], [0], [9.8, 9.27, 11.73, 12.33, 12.16, 44.71], [9.4, 8.89, 8.96, 11.45, 12.03, 49.27], [9.17, 8.5, 8.59, 8.68, 11.16, 53.89], [8.73, 8.28, 8.21, 8.3, 8.4, 58.07], [18.92, 6.63, 6.95, 6.98, 7.04, 53.47], [47.21, 13.78, 4.59, 4.91, 4.94, 24.57], [10.42, 46.09, 13.36, 4.17, 4.5, 21.45], [9.83, 9.37, 45.7, 12.97, 3.78, 18.34], [9.19, 8.82, 8.97, 45.28, 12.56, 15.17], [7.28, 10.32, 10.58, 10.89, 47.51, 13.42]], 18: [[0], [0], [9.52, 8.98, 11.68, 12.35, 12.2, 45.27], [9.12, 8.61, 8.72, 11.42, 12.09, 50.04], [8.89, 8.23, 8.34, 8.46, 11.16, 54.92], [8.55, 8.01, 7.96, 8.07, 8.2, 59.22], [19.12, 6.37, 6.7, 6.76, 6.84, 54.2], [47.84, 13.81, 4.4, 4.73, 4.78, 24.43], [10.31, 46.72, 13.42, 4.0, 4.34, 21.2], [9.74, 9.26, 46.35, 13.05, 3.64, 17.95], [9.1, 8.73, 8.87, 45.96, 12.67, 14.68], [6.97, 10.19, 10.47, 10.8, 48.23, 13.34]], 19: [[0], [0], [9.22, 8.69, 11.61, 12.37, 12.23, 45.87], [8.81, 8.33, 8.46, 11.39, 12.15, 50.86], [8.62, 7.94, 8.08, 8.23, 11.16, 55.96], [8.37, 7.73, 7.69, 7.84, 7.99, 60.39], [19.33, 6.12, 6.45, 6.53, 6.63, 54.93], [48.49, 13.85, 4.2, 4.54, 4.62, 24.29], [10.21, 47.36, 13.48, 3.84, 4.17, 20.93], [9.65, 9.14, 47.01, 13.13, 3.49, 17.57], [9.01, 8.63, 8.78, 46.64, 12.77, 14.16], [6.66, 10.05, 10.37, 10.71, 48.92, 13.29]], 20: [[0], [0], [8.92, 8.39, 11.55, 12.4, 12.28, 46.46], [8.52, 8.03, 8.2, 11.36, 12.22, 51.67], [8.32, 7.65, 7.82, 8.0, 11.17, 57.04], [8.19, 7.44, 7.42, 7.6, 7.78, 61.58], [19.55, 5.86, 6.19, 6.29, 6.43, 55.67], [49.14, 13.89, 4.01, 4.35, 4.45, 24.15], [10.12, 47.99, 13.55, 3.67, 4.0, 20.66], [9.57, 9.04, 47.67, 13.22, 3.34, 17.15], [8.92, 8.54, 8.69, 47.32, 12.88, 13.64], [6.35, 9.91, 10.27, 10.63, 49.58, 13.26]], 21: [[0], [0], [8.6, 8.11, 11.5, 12.45, 12.33, 47.01], [8.19, 7.74, 7.93, 11.35, 12.29, 52.49], [8.03, 7.36, 7.55, 7.77, 11.17, 58.11], [8.0, 7.15, 7.15, 7.35, 7.56, 62.8], [19.77, 5.6, 5.93, 6.06, 6.21, 56.43], [49.8, 13.94, 3.82, 4.15, 4.28, 24.0], [10.02, 48.64, 13.61, 3.5, 3.83, 20.39], [9.5, 8.93, 48.33, 13.31, 3.19, 16.74], [8.83, 8.46, 8.61, 48.01, 12.98, 13.1], [6.04, 9.79, 10.18, 10.54, 50.27, 13.18]], 22: [[0], [0], [8.28, 7.81, 11.46, 12.49, 12.4, 47.56], [7.89, 7.43, 7.65, 11.3, 12.35, 53.37], [7.73, 7.06, 7.28, 7.52, 11.18, 59.23], [7.82, 6.85, 6.87, 7.09, 7.34, 64.05], [20.0, 5.34, 5.66, 5.81, 6.0, 57.19], [50.46, 13.99, 3.63, 3.96, 4.11, 23.84], [9.93, 49.29, 13.68, 3.32, 3.65, 20.12], [9.42, 8.83, 49.0, 13.4, 3.04, 16.31], [8.75, 8.38, 8.53, 48.69, 13.09, 12.55], [5.75, 9.66, 10.09, 10.47, 50.98, 13.05]], 23: [[0], [0], [7.97, 7.51, 11.41, 12.55, 12.44, 48.13], [7.56, 7.14, 7.38, 11.3, 12.43, 54.19], [7.43, 6.75, 7.01, 7.27, 11.17, 60.37], [7.64, 6.55, 6.58, 6.83, 7.11, 65.3], [20.23, 5.07, 5.39, 5.57, 5.77, 57.97], [51.12, 14.05, 3.44, 3.76, 3.93, 23.69], [9.85, 49.94, 13.76, 3.15, 3.48, 19.81], [9.36, 8.74, 49.67, 13.49, 2.88, 15.86], [8.67, 8.31, 8.45, 49.38, 13.21, 11.98], [5.43, 9.54, 10.02, 10.41, 51.68, 12.93]], 24: [[0], [0], [7.62, 7.19, 11.35, 12.6, 12.51, 48.73], [7.23, 6.82, 7.09, 11.27, 12.5, 55.08], [7.11, 6.44, 6.72, 7.02, 11.19, 61.53], [7.46, 6.24, 6.28, 6.57, 6.87, 66.6], [20.46, 4.8, 5.12, 5.31, 5.55, 58.75], [51.79, 14.1, 3.24, 3.56, 3.76, 23.54], [9.77, 50.59, 13.84, 2.98, 3.3, 19.52], [9.29, 8.64, 50.35, 13.58, 2.73, 15.4], [8.59, 8.24, 8.38, 50.08, 13.32, 11.39], [5.11, 9.42, 9.94, 10.34, 52.39, 12.8]], 25: [[0], [0], [7.3, 6.88, 11.3, 12.64, 12.56, 49.34], [6.88, 6.51, 6.82, 11.25, 12.6, 55.94], [6.79, 6.13, 6.43, 6.76, 11.18, 62.71], [7.27, 5.92, 5.98, 6.29, 6.62, 67.93], [20.7, 4.53, 4.84, 5.06, 5.32, 59.54], [52.46, 14.16, 3.05, 3.36, 3.58, 23.39], [9.69, 51.27, 13.91, 2.8, 3.11, 19.22], [9.23, 8.55, 51.03, 13.68, 2.57, 14.93], [8.52, 8.17, 8.31, 50.78, 13.43, 10.79], [4.81, 9.3, 9.84, 10.27, 53.03, 12.75]]}
        for count in range(-25,26):
            for dealer_card in range(2,12):
                for i in range(0,6):
                    dictionary[count][dealer_card][i] = dictionary[count][dealer_card][i]/100
        return dictionary
    def choose_cut_card(self):
        num_cards = len(self.cards_in_shoe)
        upper_bound = num_cards - 52
        lower_bound = num_cards/2 +52
        cut_card = random.randint(lower_bound, upper_bound)
        return cut_card
    def shoe_initializer(self, num_decks):
        cards = []
        for i in range(2,12):
            if i == 10:
                for j in range(16*num_decks):
                    cards += [i]
            else:
                for j in range(4*num_decks):
                    cards += [i]
        return cards
    def count(self, cards):
        lows = [2,3,4,5,6]
        highs = [10,11]
        for card in cards:
            if card in lows:
                self.running_count += 1
            if card in highs:
                self.running_count += -1
        decks_left = round(len(self.cards_in_shoe) / 52, 0)
        if decks_left == 0:
            self.true_count = self.running_count
        else:
            self.true_count = round(self.running_count / decks_left, 0)
    def reshuffle_cards(self):
        self.running_count = 0
        self.true_count = 0
        self.cards_in_shoe = self.shoe_initializer(self.num_decks)
        self.cards_played = []
        self.cut_card = self.choose_cut_card()
    def deal_cards(self):
        cards = []
        for i in range(2*self.num_players+1):
            cards += [random.choice(self.cards_in_shoe)]
            self.cards_in_shoe.remove(cards[i])
        self.count(cards)
        self.cards_played += cards
        for i in range(self.num_players):
            self.player_cards += [[cards[2*i],cards[2*i+1]]]
        self.dealer_cards += [cards[-1]]

    def P(self, card):
        true_count = self.true_count
        if card in [2,3,4,5,6]:
            return ((5/13 - (true_count/(104)))*(1/5))
        elif card == 10:
            return ((5/13 + (true_count/104))*(4/5))
        elif card == 11 or card == 1:
            return ((5/13 + (true_count/104))*(1/5))
        elif card == 0:
            return 0
        else:
            return (1/13)
    
    def P_bust_if_hit(self, score):
        true_count = self.true_count
        margin = 21-score
        if margin == 0:
            return 1
        if margin >= 10:
            return 0
        success_prob = 0
        for card in range(1,margin+1):
            success_prob += self.P(card)
        return 1 - success_prob
    
    def P_1_hit_results(self): #probability of resulting sum after one hit
        probs = {}
        for count in range(-25,25):
            self.true_count = count
            probs.update({count: {}})
            for score in range(21,2,-1):
                probs[count].update({score: {}})
                for result in range(score,22):
                    probaiblity = 0 #given count and score, p(obtaining result)
                    if result - score <= 11:
                        probability = self.P(result - score)
                    else:
                        probability = 0
                    probs[count][score].update({result: round(100*probability,2)})
                probability = 0 #given count and score, p(bust)
                if 21 - score >=10:
                    probabilty = 0
                else:
                    diff = 21-score
                    for card in range(diff+1,11):
                        probability += self.P(card)
                probs[count][score].update({"B": round(100*probability,2)})
        self.true_count = 0
        return probs
    def P_dealer_outcome(self, S_or_H_17):
        dictionary_S17 = {} #dealer_sum is the key, [NoAce[p_17,p_18,p_19,p_20,p_21],Ace[p_17,p_18,p_19,p_20,p_21]] is the value
        #dictionary_H17 = {} #dealer_csum is the key, [p_17,p_18,p_19,p_20,p_21] is the value
        cards = [2,3,4,5,6,7,8,9,10,11]
        for i in range(17,22):
            arr = [0 for num in range(17,i)]+[1]+[0 for num in range(i+1,23)]
            dictionary_S17.update({i: [arr,arr]})
        for i in range(22,28):
            arr = [0,0,0,0,0,1]
            dictionary_S17.update({i: [0,0,0,0,0,1]})
        for dealer_sum in range(16,1,-1):
            for card in cards:
                newsum = dealer_sum+card
                new_sum_outcomes = dictionary_S17[newsum]



    def P_dealer_bust(self, dealer_card):
        #true_count = self.true_count
        p_bust = 0
        p_17 = 0
        p_18 = 0
        p_19 = 0
        p_20 = 0
        p_21 = 0
        card_combos = []
        poss_cards = [2,3,4,5,6,7,8,9,10,11]
        for i in range(500000):
            cards = [dealer_card]
            score = dealer_card
            new_cards = []
            while score < 17:
                new_card = random.choice(poss_cards)
                cards += [new_card]
                score = sum(cards)
                new_cards += [new_card]
                if score > 21 and 11 in cards:
                    for i in range(len(cards)):
                        if cards[i] == 11:
                            cards[i] = 1
                            score = sum(cards)
            if score >21:
                combination =  new_cards
                if combination in card_combos:
                    continue
                else:
                    card_combos += [combination]
                    prob_of_combination = 1
                    for card in combination:
                        prob_of_combination = prob_of_combination * self.P(card)
                    p_bust += prob_of_combination
            else:
                combination =  new_cards
                if combination in card_combos:
                    continue
                else:
                    card_combos += [combination]
                    prob_of_combination = 1
                    for card in combination:
                        prob_of_combination = prob_of_combination * self.P(card)
                    if score == 17:
                        p_17 += prob_of_combination
                    elif score == 18:
                        p_18 += prob_of_combination
                    elif score == 19:
                        p_19 += prob_of_combination
                    elif score == 20:
                        p_20 += prob_of_combination
                    else:
                        p_21 += prob_of_combination

        return [p_17,p_18,p_19,p_20,p_21,p_bust]


        #split if EV(split) > EV(no_split)
            #EV(no_split for 2 cards) given by:
                #double if p(winning after 1 hit) >0.5 
                #hit if p(winning after hit) > p(winning after stay)
                #stay if p(winning after stay) > p(winning after hit)
        
    def strategy_card_creator(self):
        #Hard sums first
        for count in range(-25,25):
            self.strategy["Hard"].update({count: {}})
            for score in range(2,21):
                self.strategy["Hard"][count].update({score: {}})
                for dealer_card in range(2,12):
                    array = [] #[[p(W if hit 1), tie], [p(W if hit), tie], [p(W if stay), tie]]

                    #P(WIN OR TIE IF HIT 1):
                    p_hit_once = [0,0] ##[P(win if hit once),P(tie if hit once)]:

                    #P(WIN OR TIE IF STAY):
                    p_stay = [0,0] #[P(win if stay),P(tie if stay)]:
                    if score< 17:
                        p_stay[0] = self.probDealerOutcomes[count][dealer_card][5] # = p(dealer bust)
                    else:
                        index = 4-(21-score)
                        p_stay[0] = sum(self.probDealerOutcomes[count][dealer_card][i] for i in range(0,index))+self.probDealerOutcomes[count][dealer_card][5]
                        p_stay[1] = self.probDealerOutcomes[count][dealer_card][index]
                    
                    self.strategy["Hard"][count][score].update({dealer_card: array})
                    

            self.strategy["Hard"].update({score: []})

    def play_game(self):
        return None

    def split_win_prob(self):
        dealer_card =  self.dealer_cards[0]
        cards = self.player_cards

    def one_or_two_hit_win_prob(self):
        count = self.true_count
        dealer_card = self.dealer_cards[0]
        cards = self.player_cards
        ace = False
        if 11 in cards:
            ace= True
        #outcomes_new = self.one_hit_win_prob(score, ace) #[win,tie,lose]
        outcomes = [0,0,0]
        for card1 in range(2,12):
            score = sum(cards)
            p_card = self.P(card1)
            score = score +card1
            if score >21:
                if card1 == 11:
                    score -= 10
                elif ace == True:
                    score -= 10
                    cards.remove(11)
                    cards += [1]
                    if 11 not in cards:
                        ace = False
                else:
                    outcomes[2] += p_card
                    continue
            stayProbs = self.stay_win_prob(score,ace)
            if stayProbs[0]>stayProbs[2]:
                outcomes[0] += p_card*stayProbs[0]
                outcomes[1] += p_card*stayProbs[1]
                outcomes[2] += p_card*stayProbs[2]
            else:
                hitProbs = self.one_hit_win_prob(score, ace)
                outcomes[0] += p_card*hitProbs[0]
                outcomes[1] += p_card*hitProbs[1]
                outcomes[2] += p_card*hitProbs[2]
        return outcomes



    def player_action(self):
        dealer_card =  self.dealer_cards[0]
        cards = self.player_cards
        score = sum(cards)
        #assuming you bet 10
        p_hit_once = self.one_hit_win_prob(score, False)
        p_hit_no_double = self.one_or_two_hit_win_prob()
        p_stay = self.stay_win_prob(score,False)
        print("p_hit_once",p_hit_once)
        print("p_hit_no_double",p_hit_no_double)
        print("p_stay",p_stay)
        ev_double = 20*p_hit_once[0] - 20*p_hit_once[2]
        ev_hit_no_double= 10*p_hit_no_double[0] - 10*p_hit_no_double[2]
        ev_stay = 10*p_stay[0]-10*p_stay[2]
        print("ev_double",ev_double)
        print("ev_hit_no_double",ev_hit_no_double)
        print("ev_stay", ev_stay)
        if ev_double >= ev_hit_no_double and ev_double>=ev_stay and p_hit_once[0]>0.5:
            if ev_stay > ev_hit_no_double:
                return "Ds"
            else:
                return "D"
        else:
            if ev_stay > ev_hit_no_double:
                return "S"
            else:
                return "H"


    def one_hit_win_prob(self, score, ace):
        tempAce = ace
        dealer_card =  self.dealer_cards[0]
        count = self.true_count
        outcomes = [0,0,0] #[win,tie,lose]
        for card in range(2,12):
            ace = tempAce
            if card == 11:
                ace = True
            new_score = score + card
            stayProbs = self.stay_win_prob(new_score, ace)
            for i in range(3):
                outcomes[i] += self.P(card)*stayProbs[i]
        return outcomes  #if outcomes[0]>0.5, should double



    '''
        for card in range(2,12):
            new_score = score + card
            if new_score >21:
                if ace == True or card == 11:
                    new_score += -10
                else:
                    outcomes[2]+=self.P(card)
                    continue
            if new_score <17:
                outcomes[2] += self.P(card)*(self.probDealerOutcomes[count][dealer_card][0]+self.probDealerOutcomes[count][dealer_card][1]+self.probDealerOutcomes[count][dealer_card][2]+self.probDealerOutcomes[count][dealer_card][3]+self.probDealerOutcomes[count][dealer_card][4])
                outcomes[0] += self.P(card)*(self.probDealerOutcomes[count][dealer_card][5])
            else:
                index = 4-(21-new_score)
                try:
                    outcomes[0] += self.P(card)*(sum([self.probDealerOutcomes[count][dealer_card][i] for i in range(0,index)]) +self.probDealerOutcomes[count][dealer_card][5])
                    outcomes[1] += self.P(card)*self.probDealerOutcomes[count][dealer_card][index]
                    outcomes[2] += self.P(card)*sum([self.probDealerOutcomes[count][dealer_card][i] for i in range(index+1,5)])
                except IndexError:
                    print(index, new_score, score, card)
        return outcomes  #if outcomes[0]>0.5, should double
        '''     

    def stay_win_prob(self, score, ace):
        if ace:
            score2 = score-10
        dealer_card =  self.dealer_cards[0]
        count = self.true_count
        outcomes = [0,0,0] #[win,tie,lose]
        if score > 21 and ace == True:
            score += -10
            ace = False
        if score>21:
            outcomes[2] += 1
        elif score<17:
            outcomes[2] += sum([self.probDealerOutcomes[count][dealer_card][i] for i in range(0,5) ])
            outcomes[0] += self.probDealerOutcomes[count][dealer_card][5]
        else:
            index = 4-(21-score)
            outcomes[0] += (sum([self.probDealerOutcomes[count][dealer_card][i] for i in range(0,index)]) +self.probDealerOutcomes[count][dealer_card][5])
            outcomes[1] += self.probDealerOutcomes[count][dealer_card][index]
            outcomes[2] += sum([self.probDealerOutcomes[count][dealer_card][i] for i in range(index+1,5)])
        return outcomes




if  "__main__" == __name__:
    game = Game(6,1)
    card_probs = []
    ProbDealerBust = {}
    for count in range(-25,26):
        game.true_count = count
        arr = [[0],[0]]
        for card in range(2,12):
            arr += [game.P_dealer_bust(card)]
        ProbDealerBust.update({count: arr})
    table = []
    for count in range(-25,26):
        for dealer_card in range(0,12):
            row = []
            row += [count, dealer_card]
            row += [ProbDealerBust[count][dealer_card]]
            table += [row]
    game.write("DealerOutcomes.csv", table)
    print("done")
    
    
    '''#game.player_action() is good for hard totals but not for soft totals, 
    # though deviations for counts may be slightly off
    #splits and surrenders still need to be coded in.
    game = Game(6,1)
    game.player_cards = [5,7]
    game.dealer_cards = [2]
    game.true_count = 0
    print(game.player_action())'''



'''card_probs = []
    countDictionary = {}
    for count in range(-25,26):
        arr = []
        for i in range(12):
            arr+= [sum(game.probDealerOutcomes[count][i])]
        countDictionary.update({count: arr})
    for count in range(-25,26):
        for dealer_card in range(2,12):
            for i in range(6):
                game.probDealerOutcomes[count][dealer_card][i] = round(100*game.probDealerOutcomes[count][dealer_card][i]/countDictionary[count][dealer_card],2)
    
    print(game.probDealerOutcomes)
'''




'''differences = []
    for count in range(-25,26):
        for dealer_card in range(2,12):
            for i in range(6):
                difference = game.probDealerOutcomesAdj[count][dealer_card][i] - game.probDealerOutcomes[count][dealer_card][i]
                differences += [difference]
    average_diff = sum(differences)/len(differences)
    print("ave:",average_diff)
    print("max:",max(differences))
    print("min:",min(differences))
    sd = 0
    for i in range(len(differences)):
        sd += ((differences[i]-average_diff)**2)/len(differences)
    print("sd:", sd**(1/2))
'''

